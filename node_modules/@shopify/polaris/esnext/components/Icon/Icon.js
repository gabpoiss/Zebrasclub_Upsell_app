import * as React from 'react';
import { classNames, variationName } from '@shopify/react-utilities/styles';
import { withAppProvider } from '../AppProvider';
import { addMinor, alertMinor, arrowDownMinor, arrowLeftMinor, arrowRightMinor, arrowUpMinor, arrowUpDownMinor, calendarMinor, cancelMajor, cancelSmallMinor, caretDownMinor, caretUpMinor, checkmarkMinor, chevronDownMinor, chevronLeftMinor, chevronRightMinor, chevronUpMinor, circleCancelMinor, circleChevronDownMinor, circleChevronLeftMinor, circleChevronRightMinor, circleChevronUpMinor, circleInformationMajor, circlePlusMinor, circlePlusOutlineMinor, conversationMinor, deleteMinor, disableMinor, disputeMinor, duplicateMinor, embedMinor, exportMinor, externalMinor, helpMajor, homeMajor, horizontalDotsMinor, importMinor, logOutMinor, menuMajor, notesMinor, notificationMajor, onlineStoreMajor, ordersMajor, printMinor, productsMajor, profileMinor, subtractMinor, refreshMinor, riskMinor, saveMinor, searchMinor, viewMinor, } from '../../icons';
import styles from './Icon.scss';
export const BUNDLED_ICONS = {
    add: addMinor,
    alert: alertMinor,
    arrowDown: arrowDownMinor,
    arrowLeft: arrowLeftMinor,
    arrowRight: arrowRightMinor,
    arrowUp: arrowUpMinor,
    arrowUpDown: arrowUpDownMinor,
    calendar: calendarMinor,
    cancel: cancelMajor,
    cancelSmall: cancelSmallMinor,
    caretDown: caretDownMinor,
    caretUp: caretUpMinor,
    checkmark: checkmarkMinor,
    chevronDown: chevronDownMinor,
    chevronLeft: chevronLeftMinor,
    chevronRight: chevronRightMinor,
    chevronUp: chevronUpMinor,
    circleCancel: circleCancelMinor,
    circleChevronDown: circleChevronDownMinor,
    circleChevronLeft: circleChevronLeftMinor,
    circleChevronRight: circleChevronRightMinor,
    circleChevronUp: circleChevronUpMinor,
    circleInformation: circleInformationMajor,
    circlePlus: circlePlusMinor,
    circlePlusOutline: circlePlusOutlineMinor,
    conversation: conversationMinor,
    delete: deleteMinor,
    disable: disableMinor,
    dispute: disputeMinor,
    duplicate: duplicateMinor,
    embed: embedMinor,
    export: exportMinor,
    external: externalMinor,
    help: helpMajor,
    home: homeMajor,
    horizontalDots: horizontalDotsMinor,
    import: importMinor,
    logOut: logOutMinor,
    menu: menuMajor,
    notes: notesMinor,
    notification: notificationMajor,
    onlineStore: onlineStoreMajor,
    orders: ordersMajor,
    print: printMinor,
    products: productsMajor,
    profile: profileMinor,
    refresh: refreshMinor,
    risk: riskMinor,
    save: saveMinor,
    search: searchMinor,
    subtract: subtractMinor,
    view: viewMinor,
};
const COLORS_WITH_BACKDROPS = [
    'teal',
    'tealDark',
    'greenDark',
    'redDark',
    'yellowDark',
    'ink',
    'inkLighter',
];
function Icon({ source, color, backdrop, accessibilityLabel, polaris: { intl }, }) {
    if (color && backdrop && COLORS_WITH_BACKDROPS.indexOf(color) < 0) {
        // eslint-disable-next-line no-console
        console.warn(intl.translate('Polaris.Icon.backdropWarning', {
            color,
            colorsWithBackDrops: COLORS_WITH_BACKDROPS.join(', '),
        }));
    }
    const className = classNames(styles.Icon, color && styles[variationName('color', color)], color && color !== 'white' && styles.isColored, backdrop && styles.hasBackdrop);
    let contentMarkup;
    if (source === 'placeholder') {
        contentMarkup = <div className={styles.Placeholder}/>;
    }
    else if (React.isValidElement(source)) {
        contentMarkup = source;
    }
    else {
        const iconSource = typeof source === 'string' && isBundledIcon(source)
            ? BUNDLED_ICONS[source]
            : source;
        contentMarkup = iconSource &&
            iconSource.viewBox &&
            iconSource.body && (<svg className={styles.Svg} viewBox={iconSource.viewBox} dangerouslySetInnerHTML={{ __html: iconSource.body }} focusable="false" aria-hidden="true"/>);
    }
    return (<span className={className} aria-label={accessibilityLabel}>
      {contentMarkup}
    </span>);
}
function isBundledIcon(key) {
    return Object.keys(BUNDLED_ICONS).includes(key);
}
export default withAppProvider()(Icon);
